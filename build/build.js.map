{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Binding.js","src/Compiler.js","src/Depend.js","src/Observer.js","src/Parser.js","src/Updater.js","src/Watcher.js"],"names":[],"mappings":"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","file":"build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Bind.js\n *\n * Created by xiepan on 2017/1/9 上午11:50.\n */\nimport createCompiler from \"./Compiler\";\nimport createObserver from \"./Observer\";\nimport Watcher from \"./Watcher\";\n\nwindow.Binding = Binding\n\n/**\n * 构造函数入口\n *\n * @param options [数据参数对象]\n * @constructor\n */\nfunction Binding(options) {\n    console.log('Binding 正在启动...')\n    console.log('数据参数对象:', options)\n    this.$options = options\n    this.$data = options.data\n\n    var el = document.querySelector(this.$options.el)\n\n    if (!el) {\n        console.error('[Binding warn] ' + this.$options.el + ' is not exist')\n        return\n    }\n\n    // 代理\n    this._init(el)\n    // 创建数据监听器(观察者)\n    createObserver(this.$data)\n    // 创建编译模块\n    createCompiler(options, this)\n}\n\nvar proto = Binding.prototype\n\nproto._init = function (el) {\n    var _this = this\n\n    this.$options.el = el\n\n    Object.keys(_this.$data).forEach(function (key) {\n        _this._proxy(key)\n    })\n}\nproto.$watch = function (key, cb) {\n    new Watcher(this, key, cb)\n}\n\nproto._proxy = function (key) {\n    console.log('[Binding.prototype] proxy')\n    var _this = this\n    Object.defineProperty(_this, key,\n        {\n            configurable: false,\n            enumerable: true,\n            get: function () {\n                return _this.$data[key]\n            },\n            set: function (newVal) {\n                _this.$data[key] = newVal\n            }\n        }\n    )\n}\n","/**\n * compile.js\n *\n * 编译模块\n *\n * Created by xiepan on 2017/1/9 上午10:12.\n */\nimport Parsers from \"./Parser\";\n\nfunction Compiler(options, vm) {\n    console.log('正在创建[指令解析器]...')\n    console.log('数据参数对象:', options, 'Binding 实例', vm)\n\n    var el = options.el\n    this.$el = isElementNode(el) ? el : document.querySelector(el)\n    this.$data = options.$data\n    this.$vm = vm\n    this.mount()\n}\n\nCompiler.prototype = {\n    mount: function () {\n        var fragment = node2Fragment(this.$el)\n        this.compile(fragment)\n        this.$el.appendChild(fragment)\n    },\n\n    compile: function (el) {\n        console.log('[Compiler.prototype] 开始解析(compile)', el)\n        // Node.childNodes 返回包含指定节点的子节点的集合\n        // https://developer.mozilla.org/zh-CN/docs/Web/API/Node/childNodes\n        // ParentNode.children 是一个只读属性，返回一个包含当前元素的子元素的集合\n        // https://developer.mozilla.org/zh-CN/docs/Web/API/ParentNode/children\n        var childNodes = el.childNodes,\n            _this = this\n        Array.prototype.slice.call(childNodes).forEach(function (node) {\n            var text = node.textContent\n            var mustacheRe = /\\{\\{(.*)\\}\\}/\n\n            // 元素\n            if (isElementNode(node)) {\n                _this.parse(node)\n                // 文本\n            } else if (isTextNode(node) && mustacheRe.test(text)) {\n                _this.parseText(node, RegExp.$1)\n            }\n            // 子节点\n            if (node.childNodes && node.childNodes.length > 0) {\n                _this.compile(node)\n            }\n        })\n    },\n    /**\n     * 解析元素节点\n     *\n     * @param node\n     */\n    parse: function (node) {\n        console.log('[Compiler.prototype] 解析元素节点(parse)')\n        var nodeAttrs = node.attributes,\n            _this = this\n\n        // 处理指令\n        Array.prototype.slice.call(nodeAttrs).forEach(function (attr) {\n            var attrName = attr.name\n            if (isDirective(attrName)) {\n                // 指令值\n                var expression = attr.value\n                // 指令类型\n                var directive = attrName.substring(2);\n                // 是事件指令\n                if (isEventDirective(directive)) {\n                    Parsers._eventHandler(node, _this.$vm, expression, directive)\n                } else {\n                    // 其他指令\n                    if (Parsers[directive]) {\n                        Parsers[directive](node, _this.$vm, expression)\n                    } else {\n                        console.error('[Binding error] v-' + directive + ' is not supported')\n                    }\n                }\n            }\n        })\n    },\n    parseText: function (node, exp) {\n        console.log('[Compiler.prototype] 解析元素节点(parseText)')\n        Parsers.text(node, this.$vm, exp)\n    }\n}\n\n\n/**\n * element 的子节点转换成文档片段\n *\n * DocumentFragments 是一些DOM节点。它们不是DOM树的一部分。\n * 在DOM树中，文档片段会被替换为它所有的子元素。\n * 因为文档片段存在与内存中，并不在DOM树中，\n * 所以将子元素插入到文档片段时不会引起页面回流(reflow)(对元素位置和几何上的计算)，可以优化性能。\n *\n * @param el\n * @returns {DocumentFragment}\n */\nfunction node2Fragment(el) {\n    var fragment = document.createDocumentFragment()\n    var child\n    while (child = el.firstChild) {\n        fragment.appendChild(child);\n    }\n    return fragment\n}\n\n/**\n * 是否是指令\n *\n * @param attrName\n * @returns {boolean}\n */\nfunction isDirective(attrName) {\n    return attrName.indexOf('v-') === 0\n}\n/**\n * 是否是事件指令\n *\n * @param attrName\n * @returns {boolean}\n */\nfunction isEventDirective(attrName) {\n    return attrName.indexOf('on') === 0\n}\n/**\n * 是否是元素节点\n * https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType\n *\n * @param node\n * @returns {boolean}\n */\nfunction isElementNode(node) {\n    return node && node.nodeType === 1\n}\n/**\n * 是否是文本节点\n *\n * @param node\n * @returns {boolean}\n */\nfunction isTextNode(node) {\n    return node && node.nodeType === 3\n}\n\nexport default function createCompiler(options, vm) {\n    new Compiler(options, vm)\n}\n","/**\n * Depend.js\n *\n * 依赖收集模块\n *\n * 每个数据拥有一个 Depend 依赖收集器，\n * 用于维护 watchers (订阅者)数组，数据变动触发 notify 方法，\n * 再调用 watchers 的 update 方法\n *\n * Created by xiepan on 2017/1/9 下午3:52.\n */\n\nvar id = 0;\n\nexport default function Depend(key) {\n    console.log('正在创建[依赖收集器]...', 'key', key)\n    this.id = id++\n    this.watchers = []\n    this.watcher = null\n}\n\nDepend.prototype = {\n    /**\n     * 添加订阅者\n     *\n     * @param watcher\n     */\n    addWatcher: function (watcher) {\n        console.log('[Observer Depend.prototype] addWatcher')\n        this.watchers.push(watcher)\n    },\n    depend: function () {\n        console.log('[Observer Depend.prototype] depend')\n        Depend.watcher.addDepend(this)\n    },\n    notify: function () {\n        console.log('[Observer Depend.prototype] notify')\n        console.log('watchers', this.watchers)\n        this.watchers.forEach(function (watcher) {\n            watcher.update()\n        })\n    }\n}","/**\n * observer.js\n *\n * 数据监听模块\n *\n * Created by xiepan on 2017/1/6 下午4:04.\n */\n// var $data = {name: 'ggg'}\n// createObserver($data)\n// $data.name = '123'\nimport Depend from \"./Depend\";\n\nfunction Observer(data) {\n    // 监听对象的变化\n    if (typeof data === 'object') {\n        console.log('正在创建[事件监听器]...')\n        console.log('被监听数据：', data)\n        this.$data = data\n        this.observeObj(data)\n    }\n}\n\nObserver.prototype = {\n    /**\n     * 监听对象的变化\n     *\n     * @param data\n     */\n    observeObj: function (data) {\n        console.log('[Observer.prototype] observeObj')\n        var _this = this\n        Object.keys(data).forEach(function (key) {\n            _this.defineProperty(_this.$data, key, data[key])\n        })\n    },\n    /**\n     * 检测对象的变化 & 依赖收集\n     *\n     * @param data\n     * @param key\n     * @param val\n     */\n    defineProperty: function (data, key, val) {\n        var dep = new Depend(key)\n        // 嵌套对象\n        var childObj = createObserver(val)\n        Object.defineProperty(data, key, {\n            enumerable: true,\n            configurable: false,\n            get: function () {\n                console.log('[Observer.prototype] defineProperty:Depend.watcher', Depend.watcher)\n                if (Depend.watcher) {\n                    dep.depend()\n                }\n                return val\n            },\n            set: function (newVal) {\n                if (newVal === val) {\n                    return\n                }\n                val = newVal\n                childObj = createObserver(newVal)\n                dep.notify()\n            }\n        })\n    }\n}\n\n/**\n * 创建数据监听器\n *\n * @param value\n * @returns {Observer}\n */\nexport default function createObserver(data) {\n    if (data) {\n        return new Observer(data)\n    }\n}\n","/**\n * Parser.js\n *\n * 指令解析模块(v-text,v-html,v-model,v-class,v-on)\n *\n * Created by xiepan on 2017/1/10 下午1:25.\n */\nimport Updater from \"./Updater\";\nimport Watcher from \"./Watcher\";\n\n\nvar Parsers = {\n    text: function (node, vm, exp) {\n        // console.log('[Compiler DirectiveParsers] text')\n        this._bind(node, vm, exp, 'text')\n    },\n    html: function (node, vm, exp) {\n        // console.log('[Compiler DirectiveParsers] html')\n        this._bind(node, vm, exp, 'html')\n    },\n    model: function (node, vm, exp) {\n        // console.log('[Compiler DirectiveParsers] model')\n        this._bind(node, vm, exp, 'model')\n\n        var _this = this,\n            val = this._getValue(vm, exp)\n        node.addEventListener('input', function (e) {\n            var newVal = e.target.value\n            if (val === newVal) {\n                return\n            }\n            _this._setValue(vm, exp, newVal)\n            val = newVal\n        })\n    },\n    class: function (node, vm, exp) {\n        this._bind(node, vm, exp, 'class')\n    },\n    /**\n     * 调用 Updater 视图刷新模块并为其创建数据订阅模块\n     * @param node\n     * @param vm\n     * @param exp\n     * @param dir\n     * @private\n     */\n    _bind: function (node, vm, exp, dir) {\n        // 数据更新函数\n        var updaterFn = Updater[dir]\n\n        if (updaterFn) {\n            //{node,value}\n            // 初始化视图\n            updaterFn(node, this._getValue(vm, exp))\n            // 创建数据订阅器订阅数据变化，更新视图\n            new Watcher(vm, exp, function (val, oldVal) {\n                updaterFn(node, val, oldVal)\n            })\n        }\n    },\n    /**\n     * 事件处理\n     *\n     * @param node 节点\n     * @param vm Binding实例\n     * @param exp 方法名\n     * @param dir 指令名称(如：on:click)\n     */\n    _eventHandler: function (node, vm, exp, dir) {\n        console.log('[Compiler DirectiveParsers] eventHandler')\n        // 事件类型，如 click 事件\n        var eventType = dir.split(':')[1]\n        // 绑定的方法\n        var fn = vm.$options.methods && vm.$options.methods[exp]\n\n        // 添加事件监听器\n        if (eventType && fn) {\n            node.addEventListener(eventType, fn.bind(vm), false)\n        } else {\n            if (!eventType) {\n                console.error('[Binding error] eventType after : is not defined')\n            } else {\n                console.error('[Binding error] event\\'s function or function name is not defined')\n            }\n        }\n    },\n    _getValue: function (vm, exp) {\n        // console.log('[Compiler DirectiveParsers] _getVMVal')\n        var val = vm.$data\n        exp = exp.split('.')\n        exp.forEach(function (k) {\n            val = val[k]\n        })\n        return val\n    },\n\n    _setValue: function (vm, exp, value) {\n        // console.log('[Compiler DirectiveParsers] _setVMVal')\n        var val = vm.$data\n        exp = exp.split('.')\n        exp.forEach(function (k, i) {\n            if (i < exp.length - 1) {\n                val = val[k]\n            } else {\n                val[k] = value\n            }\n        })\n    }\n}\n\nexport default Parsers","/**\n * Updater.js\n *\n * 视图刷新模块\n *\n * Created by xiepan on 2017/1/9 下午4:59.\n */\n\nvar Updater = {\n    text: function (node, value) {\n        console.log('[Updater] v-text', value)\n        node.textContent = typeof value == 'undefined' ? '' : value\n    },\n    html: function (node, value) {\n        console.log('[Updater] v-html', node, value)\n        node.innerHTML = typeof value == 'undefined' ? '' : value\n    },\n    class: function (node, value, oldValue) {\n        console.log('[Updater] v-class', node, oldValue, '->', value)\n        var className = node.className\n        className = className.replace(oldValue, '').replace(/\\s$/, '')\n\n        var space = className && String(value) ? ' ' : ''\n        node.className = className + space + value\n    },\n    model: function (node, value) {\n        console.log('[Updater] v-model', node, value)\n        node.value = typeof value == 'undefined' ? '' : value\n    }\n}\n\nexport default Updater\n","/**\n * Watcher.js (subscriber)\n *\n * 数据订阅模块\n *\n * Created by xiepan on 2017/1/9 下午1:39.\n */\nimport Depend from \"./Depend\";\n\nexport default function Watcher(vm, exp, callback) {\n    console.log('正在创建[数据订阅器]...', 'vm:', vm, ' expression:', exp, ' callback:', callback)\n\n    this.vm = vm\n    // 数据更新回调函数\n    this.callback = callback\n    // 表达式\n    this.expression = exp\n    // 依赖 id\n    this.depIds = {}\n    this.value = this._getValue()\n}\n\nWatcher.prototype = {\n    update: function () {\n        console.log('[Watcher.prototype] update')\n        var value = this._getValue()\n        var oldValue = this.value\n        if (value !== oldValue) {\n            console.log('[Watcher.prototype] value:', oldValue, '->', value)\n            this.value = value\n            this.callback.call(this.vm, value, oldValue)\n        }\n    },\n    addDepend: function (dep) {\n        console.log('[Watcher.prototype] addDepend')\n        if (!this.depIds.hasOwnProperty(dep.id)) {\n            dep.addWatcher(this)\n            this.depIds[dep.id] = dep\n        }\n    },\n    _beforeGet: function () {\n        Depend.watcher = this\n        console.log('[Watcher.prototype] _beforeGet watcher', this)\n    },\n    _getValue: function () {\n        this._beforeGet();\n        var exp = this.expression.split('.')\n        var val = this.vm.$data\n        exp.forEach(function (k) {\n            val = val[k]\n        })\n        this._afterGet();\n        return val\n    },\n    _afterGet: function () {\n        Depend.watcher = null\n    }\n\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}